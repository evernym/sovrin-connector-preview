apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

//TODO Once android builds are stable. Consider removing commented code.
project.ext.react = [
        entryFile: "index.js"
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.3'

    // IMPORTANT: This is required to fix this issue: https://github.com/android-ndk/ndk/issues/700
    packagingOptions{
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }

    defaultConfig {
        applicationId "org.sovrinconnector"
        minSdkVersion 23
        targetSdkVersion 26
        multiDexEnabled true
        versionCode 613
        versionName "1.0"
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
            incremental = false; //If you see any build issues, try uncommenting this line development phases. Do not commit this line uncommented
        }
         ndk {
             abiFilters 'x86', 'armeabi-v7a'//, 'x86_64', 'armeabi',  'arm64-v8a' // <- only the supported ones
         }

        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        missingDimensionStrategy "minReactNative", "minReactNative46"

        manifestPlaceholders = [onesignal_app_id: "1f",
                                // Project number pulled from dashboard, local value is ignored.
                                onesignal_google_project_number: "REMOTE",
                                HOCKEYAPP_APP_ID: "f9",
                                BRANCH_LIVE_KEY: "key_live_g1q",
                                BRANCH_TEST_KEY:"key_test_fnS"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs{
        release {
            // we need this configuration for fastlane step workflow in bitrise.
            storeFile file(System.getenv("HOME") + "/keystores/my_keystore.jks")
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }
    }
    // TODO:KS We might want to generate different APKs for separate ABIs
    // but for now we are going to generate only one APK
//    splits {
//        abi {
//            reset()
//            enable enableSeparateBuildPerCPUArchitecture
//            universalApk false  // If true, also generate a universal APK
//            include "x86" , "armeabi-v7a", "arm", "arm64", "armv7"
//        }
//    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    compile project(':react-native-zip-archive')
    compile project(':react-native-aes-crypto')
    compile project(':react-native-randombytes')
    compile project(':react-native-document-picker')
    compile project(':react-native-sensitive-info')
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    compile project(':react-native-share')
    compile project(':react-native-version-number')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-image-resizer')
    compile 'com.google.firebase:firebase-messaging:11.8.0'
    compile project(':react-native-touch-id')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-camera')
    compile project(':react-native-sentry')
    compile project(':react-native-branch')
    compile project(':react-native-splash-screen')
    compile project(':apptentive-react-native')
    androidTestImplementation(project(path: ":detox"))
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:26.0.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'

    implementation 'com.android.support:multidex:1.0.3'

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile ('com.facebook.react:react-native:0.51.0') { force=true }
    // From node_modules
    compile project(':react-native-vector-icons')
    compile project(':react-native-fcm')
    compile project(':react-native-radial-gradient')
    compile 'net.hockeyapp.android:HockeySDK:4.1.4'
    compile 'com.android.support:palette-v7:26.1.0'
    compile 'com.sovrin:vcx:1.0.0-23-08-2018T16-48-02@aar'
    implementation 'net.sourceforge.streamsupport:android-retrofuture:1.6.2'
    implementation group: 'net.sourceforge.streamsupport', name: 'android-retrostreams', version: '1.6.2'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.59'
    //TODO remove JNA when vcx.aar is resolved from repo instead of flat file
    //TODO JNA only needed when vcx.aar is resolved from flat file
    implementation 'net.java.dev.jna:jna:4.5.0@aar'
    // un-comment below lines to enable logging in vcx and indy
    // compile group: 'com.mobidevelop.robovm', name: 'robovm-rt', version: '2.3.4'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'

